import subprocess\nimport os\nfrom utils.config_loader import load_config, get_gdrive_paths\n\nCONFIG = load_config()\n# GDRIVE_PATHS = get_gdrive_paths(CONFIG) # We'll load this when a function needs it\n\ndef separate_stems(input_audio_path, output_directory_name=\"separated_stems\"):\n    \"\"\"\n    Separates stems from an audio file using Demucs.\n    Assumes Demucs is installed and accessible in the system PATH.\n\n    Args:\n        input_audio_path (str): Absolute path to the input audio file.\n        output_directory_name (str): Name of the directory to save stems within the GDrive output path.\n\n    Returns:\n        dict: A dictionary where keys are stem names (e.g., \'bass\', \'drums\') \n              and values are the paths to the separated stem files.\ \n              Returns None if separation fails.\n    \"\"\"\n    if not os.path.exists(input_audio_path):\n        print(f\"Error: Input audio file not found at {input_audio_path}\")\n        return None\n\n    gdrive_paths = get_gdrive_paths(CONFIG) # Get GDrive paths\n    # Ensure the base output path from GDrive config exists\n    base_gdrive_output_path = gdrive_paths[\'output\']\n    if not os.path.exists(base_gdrive_output_path):\n        print(f\"Error: GDrive output path {base_gdrive_output_path} does not exist. Please mount GDrive.\")\n        # os.makedirs(base_gdrive_output_path, exist_ok=True) # Potentially create if permissions allow\n        return None\n\n    # Specific output directory for this job's stems\n    stems_output_path = os.path.join(base_gdrive_output_path, output_directory_name)\n    if not os.path.exists(stems_output_path):\n        os.makedirs(stems_output_path, exist_ok=True)\n        print(f\"Created Demucs output directory: {stems_output_path}\")\n\n    demucs_model = CONFIG.get(\'demucs_model\', \'htdemucs\') # Default to htdemucs if not in config\n    \n    # Demucs command: python3 -m demucs --out <output_path> --filename \"{track}/{stem}.{ext}\" <input_audio_path>\n    # We want specific stems, so we might need to adjust the command or process output.\n    # For 2-stem (bass, drums), Demucs typically outputs them directly if a 4-stem model is used.\n    # Or, you can specify `--stems bass drums` with newer versions if available.\n    # Let's assume a 4-stem model and we'll pick bass and drums.\n    \n    command = [\n        \"python3\", \"-m\", \"demucs\",\n        \"--out\", stems_output_path,\n        \"--filename\", \"{stem}.{ext}\", # Simpler naming, we know the source\n        \"-n\", demucs_model,\n        input_audio_path\n    ]\n\n    print(f\"Running Demucs command: {\' \'.join(command)}\")\n\n    try:\n        process = subprocess.run(command, check=True, capture_output=True, text=True)\n        print(\"Demucs processing successful.\")\n        print(process.stdout)\n\n        # Expected output stem files (Demucs default names for a 4-stem model)\n        # This might need adjustment based on the exact Demucs version and model.\n        # The `stem_pairs` in config isn't directly used by Demucs command this way,\n        # but informs us what we *want*.\n        expected_stems = {\n            \"bass\": os.path.join(stems_output_path, \"bass.wav\"), # or .mp3 depending on Demucs output\n            \"drums\": os.path.join(stems_output_path, \"drums.wav\"),\n            # \"other\": os.path.join(stems_output_path, \"other.wav\"),\n            # \"vocals\": os.path.join(stems_output_path, \"vocals.wav\")\n        }\n\n        extracted_stem_paths = {}\n        for stem_name, stem_path in expected_stems.items():\n            if os.path.exists(stem_path):\n                extracted_stem_paths[stem_name] = stem_path\n                print(f\"Found {stem_name} at {stem_path}\")\n            else:\n                print(f\"Warning: Expected {stem_name} stem not found at {stem_path}\")\n        \n        if not extracted_stem_paths.get(\"bass\") or not extracted_stem_paths.get(\"drums\"):\n            print(\"Error: Did not find both bass and drum stems. Check Demucs output.\")\n            return None\n            \n        return extracted_stem_paths\n\n    except subprocess.CalledProcessError as e:\n        print(f\"Error during Demucs processing: {e}\")\n        print(f\"Stderr: {e.stderr}\")\n        return None\n    except FileNotFoundError:\n        print(\"Error: Demucs command not found. Is it installed and in PATH?\")\n        return None\n\nif __name__ == \'__main__\':\n    # This is an example. You\'ll need to ensure GDrive is mounted \n    # and a sample audio file exists at the specified path on GDrive.\n    \n    print(\"Demucs Wrapper Example\")\n    config = load_config()\n    gdrive_paths = get_gdrive_paths(config)\n    \n    # Create a dummy input file for testing if it doesn\'t exist\n    # IMPORTANT: This dummy file won\'t actually work with Demucs, it\'s just for path testing.\n    # You need a real audio file in your GDrive for Demucs to process.\n    dummy_audio_on_gdrive_raw = os.path.join(gdrive_paths[\'raw\'], \"test_song.mp3\")\n    \n    if not os.path.exists(gdrive_paths[\'raw\']):\n        print(f\"Please ensure GDrive is mounted and {gdrive_paths[\'raw\']} exists.\")\n    elif not os.path.exists(dummy_audio_on_gdrive_raw):\n        print(f\"Warning: Test audio file {dummy_audio_on_gdrive_raw} not found.\")\n        print(\"Please place a test MP3 in your GDrive\'s mp3_raw folder for a real test.\")\n    else:\n        print(f\"Attempting to process: {dummy_audio_on_gdrive_raw}\")\n        # Ensure the output directory on GDrive is ready for this specific job\n        # The separate_stems function will use gdrive_paths['output'] as the base\n        # and create a subdirectory named \"separated_stems_test_song\"\n        output_subfolder_name = \"separated_stems_\" + os.path.splitext(os.path.basename(dummy_audio_on_gdrive_raw))[0]\n        \n        stem_files = separate_stems(dummy_audio_on_gdrive_raw, output_directory_name=output_subfolder_name)\n\n        if stem_files:\n            print(\"Successfully separated stems:\")\n            for stem_name, path in stem_files.items():\n                print(f\"  {stem_name}: {path}\")\n        else:\n            print(\"Stem separation failed.\")\n